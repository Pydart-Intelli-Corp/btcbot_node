name: Enhanced VPS Deployment

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  APP_NAME: 'btcbot24'
  DEPLOY_PATH: '/var/www/btcbot24'
  BACKUP_PATH: '/var/backups/btcbot24'

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.deploy }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for Deployment Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            deploy:
              - 'src/**'
              - 'api/**'
              - 'config/**'
              - 'models/**'
              - 'server.js'
              - 'package.json'
              - 'package-lock.json'
              - 'ecosystem.config.js'
              - '.github/workflows/**'

      - name: Setup Node.js
        if: steps.changes.outputs.deploy == 'true' && !inputs.skip_tests
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        if: steps.changes.outputs.deploy == 'true' && !inputs.skip_tests
        run: npm ci

      - name: Run Linting
        if: steps.changes.outputs.deploy == 'true' && !inputs.skip_tests
        run: npm run lint --if-present

      - name: Run Tests
        if: steps.changes.outputs.deploy == 'true' && !inputs.skip_tests
        run: npm test --if-present

  deploy:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Deployment Variables
        id: vars
        run: |
          echo "TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Create Deployment Package
        run: |
          # Create deployment archive excluding unnecessary files
          tar --exclude='.git' \
              --exclude='node_modules' \
              --exclude='.next' \
              --exclude='logs' \
              --exclude='uploads' \
              --exclude='.github' \
              --exclude='*.md' \
              --exclude='.env*' \
              -czf deployment.tar.gz .

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 60s
          command_timeout: 10m
          script: |
            set -e
            
            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            NC='\033[0m' # No Color
            
            echo -e "${BLUE}🚀 Starting Enhanced Deployment Process${NC}"
            echo "=================================================="
            echo "Timestamp: $(date)"
            echo "Branch: ${{ steps.vars.outputs.BRANCH }}"
            echo "Commit: ${{ steps.vars.outputs.COMMIT_SHA }}"
            echo "Environment: ${{ inputs.environment || 'production' }}"
            echo "=================================================="
            
            # Function to log with timestamp
            log() {
                echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
            }
            
            # Function to handle errors
            handle_error() {
                echo -e "${RED}❌ Error occurred: $1${NC}"
                if pm2 list | grep -q "${{ env.APP_NAME }}"; then
                    log "Attempting to restart application..."
                    pm2 restart ${{ env.APP_NAME }} || true
                fi
                exit 1
            }
            
            # Create necessary directories
            log "${YELLOW}📁 Setting up directories...${NC}"
            mkdir -p ${{ env.DEPLOY_PATH }}
            mkdir -p ${{ env.BACKUP_PATH }}
            mkdir -p ${{ env.DEPLOY_PATH }}/logs
            mkdir -p ${{ env.DEPLOY_PATH }}/uploads
            
            # System health check
            log "${BLUE}🔍 Performing system health checks...${NC}"
            
            # Check disk space (require at least 2GB free)
            AVAILABLE_SPACE=$(df ${{ env.DEPLOY_PATH }} | awk 'NR==2{print $4}')
            if [ "$AVAILABLE_SPACE" -lt 2097152 ]; then
                handle_error "Insufficient disk space. Available: ${AVAILABLE_SPACE}KB, Required: 2GB"
            fi
            
            # Check memory
            FREE_MEM=$(free -m | awk 'NR==2{print $7}')
            if [ "$FREE_MEM" -lt 500 ]; then
                log "${YELLOW}⚠️ Low memory warning: ${FREE_MEM}MB available${NC}"
            fi
            
            # Check if MySQL is running
            if ! systemctl is-active --quiet mysql; then
                log "${YELLOW}⚠️ Starting MySQL service...${NC}"
                systemctl start mysql || handle_error "Failed to start MySQL"
            fi
            
            # Create backup of current deployment
            if [ -d "${{ env.DEPLOY_PATH }}" ] && [ "$(ls -A ${{ env.DEPLOY_PATH }})" ]; then
                log "${YELLOW}💾 Creating backup...${NC}"
                BACKUP_NAME="backup_${{ steps.vars.outputs.TIMESTAMP }}"
                cp -r ${{ env.DEPLOY_PATH }} ${{ env.BACKUP_PATH }}/${BACKUP_NAME}
                
                # Keep only last 5 backups
                cd ${{ env.BACKUP_PATH }}
                ls -t | tail -n +6 | xargs -r rm -rf
                log "${GREEN}✅ Backup created: ${BACKUP_NAME}${NC}"
            fi
            
            # Stop application gracefully
            if pm2 list | grep -q "${{ env.APP_NAME }}"; then
                log "${YELLOW}🛑 Stopping application...${NC}"
                pm2 stop ${{ env.APP_NAME }}
                sleep 3
            fi
            
            # Navigate to deployment directory
            cd ${{ env.DEPLOY_PATH }}
            
            # Git operations with error handling
            log "${BLUE}📥 Updating source code...${NC}"
            if [ ! -d ".git" ]; then
                git clone https://github.com/${{ github.repository }}.git .
            else
                git fetch origin
                git reset --hard origin/${{ steps.vars.outputs.BRANCH }}
            fi
            
            # Verify git status
            CURRENT_COMMIT=$(git rev-parse --short HEAD)
            log "Current commit: $CURRENT_COMMIT"
            
            # Install Node.js dependencies
            log "${BLUE}📦 Installing dependencies...${NC}"
            if [ -f "package-lock.json" ]; then
                npm ci --production --silent || handle_error "Failed to install dependencies"
            else
                npm install --production --silent || handle_error "Failed to install dependencies"
            fi
            
            # Build Next.js application
            log "${BLUE}🔨 Building application...${NC}"
            npm run build || handle_error "Failed to build application"
            
            # Database migrations
            log "${BLUE}🗄️ Running database migrations...${NC}"
            if [ -f "scripts/migrate.js" ]; then
                node scripts/migrate.js || log "${YELLOW}⚠️ Migration script not found or failed${NC}"
            fi
            
            # Environment configuration
            log "${BLUE}⚙️ Configuring environment...${NC}"
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=5000
            
            # Database Configuration
            DB_HOST=localhost
            DB_PORT=3306
            DB_NAME=btcbot
            DB_USER=btcbot_user
            DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            
            # Admin Configuration
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            
            # Application Settings
            BASE_URL=http://${{ secrets.VPS_HOST }}:5000
            ALLOWED_ORIGINS=http://${{ secrets.VPS_HOST }}:5000,http://${{ secrets.VPS_HOST }},http://localhost:3000
            
            # Email Configuration
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            
            # Rate Limiting
            RATE_LIMIT_WINDOW_MS=900000
            RATE_LIMIT_MAX_REQUESTS=100
            EOF
            
            # Set proper permissions
            chmod 600 .env
            chown -R www-data:www-data ${{ env.DEPLOY_PATH }} 2>/dev/null || true
            
            # Start application with PM2
            log "${BLUE}🚀 Starting application...${NC}"
            pm2 start ecosystem.config.js --env production || handle_error "Failed to start application"
            
            # Wait for application to start
            sleep 10
            
            # Health checks
            log "${BLUE}🏥 Performing health checks...${NC}"
            
            # Check if PM2 process is running
            if ! pm2 list | grep -q "${{ env.APP_NAME }}.*online"; then
                handle_error "Application failed to start properly"
            fi
            
            # Check HTTP health endpoint
            for i in {1..5}; do
                if curl -f -s http://localhost:5000/health > /dev/null; then
                    log "${GREEN}✅ Health check passed${NC}"
                    break
                elif [ $i -eq 5 ]; then
                    handle_error "Health check failed after 5 attempts"
                else
                    log "${YELLOW}⏳ Health check attempt $i failed, retrying...${NC}"
                    sleep 5
                fi
            done
            
            # Performance optimization
            log "${BLUE}⚡ Applying performance optimizations...${NC}"
            
            # PM2 optimizations
            pm2 set pm2:autodump true
            pm2 set pm2:watch-ignore ["logs", "node_modules", ".git", ".next"]
            pm2 save
            
            # System optimizations
            echo 'net.core.somaxconn = 65535' >> /etc/sysctl.conf 2>/dev/null || true
            sysctl -p 2>/dev/null || true
            
            # Final status report
            log "${GREEN}🎉 Deployment completed successfully!${NC}"
            echo "=================================================="
            echo "Application Status:"
            pm2 list
            echo ""
            echo "Memory Usage:"
            pm2 monit --no-interaction | head -10
            echo ""
            echo "Application URLs:"
            echo "Frontend: http://${{ secrets.VPS_HOST }}:5000"
            echo "Admin Panel: http://${{ secrets.VPS_HOST }}:5000/adminpanel"
            echo "API: http://${{ secrets.VPS_HOST }}:5000/api"
            echo "Health Check: http://${{ secrets.VPS_HOST }}:5000/health"
            echo "=================================================="

      - name: Test Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 30s
          script: |
            # Comprehensive deployment testing
            echo "🧪 Running post-deployment tests..."
            
            # Test API endpoints
            curl -f http://localhost:5000/health || exit 1
            curl -f http://localhost:5000/api || exit 1
            
            # Test database connection
            node -e "
              const { sequelize } = require('/var/www/btcbot24/config/database');
              sequelize.authenticate()
                .then(() => console.log('✅ Database connection test passed'))
                .catch(err => { console.error('❌ Database test failed:', err); process.exit(1); });
            " || exit 1
            
            echo "✅ All tests passed!"

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 30s
          script: |
            # Cleanup old logs and temporary files
            find ${{ env.DEPLOY_PATH }}/logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
            find /tmp -name "npm-*" -mtime +1 -delete 2>/dev/null || true
            
            # Update system
            apt-get autoremove -y 2>/dev/null || true
            apt-get autoclean 2>/dev/null || true

  notify:
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Deployment Result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "✅ Application is now live at http://${{ secrets.VPS_HOST }}:5000"
          else
            echo "❌ Deployment failed!"
            echo "Please check the logs and try again."
          fi