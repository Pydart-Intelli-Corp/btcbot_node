name: Advanced Deploy to Hostinger VPS

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  APP_NAME: 'btcbot24'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint:fix || echo "Linting completed with warnings"

    - name: Run tests
      run: npm test --if-present

    - name: Build application
      id: build
      run: npm run build:prod
      env:
        NODE_ENV: production

    - name: Create deployment artifact
      run: |
        tar -czf deployment.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.github \
          --exclude=logs \
          --exclude=uploads \
          .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifact
        path: deployment.tar.gz
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.build-success == 'success'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ secrets.APP_URL }}
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: deployment-artifact

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script_stop: true
        script: |
          set -e
          
          # Configuration
          APP_DIR="/var/www/${{ env.APP_NAME }}"
          BACKUP_DIR="/var/www/backups"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_PATH="$BACKUP_DIR/${{ env.APP_NAME }}-backup-$TIMESTAMP"
          
          echo "üöÄ Starting deployment to ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'STAGING' }}..."
          echo "üìÖ Timestamp: $TIMESTAMP"
          
          # Create backup directory if it doesn't exist
          sudo mkdir -p $BACKUP_DIR
          
          # Handle rollback if requested
          if [ "${{ github.event.inputs.rollback }}" == "true" ]; then
            echo "üîÑ Performing rollback..."
            LATEST_BACKUP=$(ls -t $BACKUP_DIR/${{ env.APP_NAME }}-backup-* | head -n1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üìÇ Rolling back to: $LATEST_BACKUP"
              pm2 stop ${{ env.APP_NAME }} || echo "No processes to stop"
              sudo rm -rf $APP_DIR
              sudo mv $LATEST_BACKUP $APP_DIR
              cd $APP_DIR
              npm ci --production
              pm2 start ecosystem.config.js
              echo "‚úÖ Rollback completed!"
              exit 0
            else
              echo "‚ùå No backup found for rollback!"
              exit 1
            fi
          fi
          
          # Stop PM2 processes gracefully
          echo "‚èπÔ∏è Stopping PM2 processes..."
          pm2 stop ${{ env.APP_NAME }} || echo "No processes to stop"
          
          # Create backup of current deployment
          if [ -d "$APP_DIR" ]; then
            echo "üíæ Creating backup: $BACKUP_PATH"
            sudo cp -r $APP_DIR $BACKUP_PATH
            
            # Keep only last 5 backups
            cd $BACKUP_DIR
            ls -t ${{ env.APP_NAME }}-backup-* | tail -n +6 | xargs -r sudo rm -rf
          fi
          
          # Prepare deployment directory
          sudo mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Pull latest code
          echo "üì• Pulling latest code..."
          git fetch origin || echo "Git fetch completed"
          git reset --hard origin/${{ github.ref_name }}
          git clean -fd
          
          # Set proper permissions
          sudo chown -R $USER:$USER $APP_DIR
          chmod +x deploy.sh || echo "deploy.sh not found or not executable"
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          npm ci --production
          
          # Copy environment file if it doesn't exist
          if [ ! -f ".env" ]; then
            echo "‚ö†Ô∏è .env file not found, copying from .env.example"
            cp .env.example .env
            echo "üîß Please update .env file with production settings"
          fi
          
          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          npm run db:migrate || echo "Migrations completed or no new migrations"
          
          # Build application
          echo "üî® Building application..."
          npm run build:prod
          
          # Start PM2 processes
          echo "‚ñ∂Ô∏è Starting PM2 processes..."
          pm2 start ecosystem.config.js
          
          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          sleep 15
          
          # Health check
          echo "üè• Performing health check..."
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health || echo "000")
          
          if [ "$HEALTH_CHECK" = "200" ]; then
            echo "‚úÖ Health check passed!"
            pm2 save
            echo "üíæ PM2 configuration saved"
          else
            echo "‚ùå Health check failed (HTTP $HEALTH_CHECK)!"
            echo "üîÑ Rolling back to backup..."
            
            # Rollback on health check failure
            pm2 stop ${{ env.APP_NAME }}
            sudo rm -rf $APP_DIR
            if [ -d "$BACKUP_PATH" ]; then
              sudo mv $BACKUP_PATH $APP_DIR
              cd $APP_DIR
              pm2 start ecosystem.config.js
              echo "‚úÖ Rollback completed!"
            fi
            exit 1
          fi
          
          # Final status check
          echo "üìä Final PM2 status:"
          pm2 status
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application URL: ${{ secrets.APP_URL }}"

    - name: Upload deployment artifact to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "deployment.tar.gz"
        target: "/tmp/"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment to ${{ github.ref == 'refs/heads/main' && 'PRODUCTION' || 'STAGING' }} successful!"
          echo "üåê Application URL: ${{ secrets.APP_URL }}"
        else
          echo "‚ùå Deployment failed!"
          echo "üìã Build Status: ${{ needs.build.result }}"
          echo "üìã Deploy Status: ${{ needs.deploy.result }}"
        fi

    # Optional: Send notification to Slack/Discord/Email
    # - name: Send Slack notification
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ needs.deploy.result }}
    #     channel: '#deployments'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #     fields: repo,message,commit,author,action,eventName,ref,workflow