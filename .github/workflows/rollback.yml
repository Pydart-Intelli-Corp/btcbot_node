name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      backup_timestamp:
        description: 'Backup timestamp (leave empty for latest)'
        required: false
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Rollback deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          set -e
          
          # Configuration
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          BACKUP_TIMESTAMP="${{ github.event.inputs.backup_timestamp }}"
          
          case $DEPLOY_ENV in
            production)
              DEPLOY_PORT=5000
              APP_NAME="btcbot24-prod"
              ;;
            staging)
              DEPLOY_PORT=5001
              APP_NAME="btcbot24-staging"
              ;;
            *)
              DEPLOY_PORT=5002
              APP_NAME="btcbot24-dev"
              ;;
          esac
          
          APP_DIR="/var/www/btcbot24-$DEPLOY_ENV"
          BACKUP_DIR="/var/www/backups"
          
          echo "üîÑ Starting rollback for $DEPLOY_ENV environment..."
          echo "üìÇ App Directory: $APP_DIR"
          echo "üíæ Backup Directory: $BACKUP_DIR"
          
          # Check if backup directory exists
          if [ ! -d "$BACKUP_DIR" ]; then
            echo "‚ùå Backup directory not found: $BACKUP_DIR"
            exit 1
          fi
          
          # Find backup to restore
          if [ -n "$BACKUP_TIMESTAMP" ]; then
            BACKUP_PATH="$BACKUP_DIR/btcbot24-$DEPLOY_ENV-backup-$BACKUP_TIMESTAMP"
            if [ ! -d "$BACKUP_PATH" ]; then
              echo "‚ùå Specified backup not found: $BACKUP_PATH"
              echo "üìã Available backups:"
              ls -la $BACKUP_DIR/btcbot24-$DEPLOY_ENV-backup-* 2>/dev/null || echo "No backups found"
              exit 1
            fi
          else
            # Find latest backup
            BACKUP_PATH=$(ls -td $BACKUP_DIR/btcbot24-$DEPLOY_ENV-backup-* 2>/dev/null | head -n1)
            if [ -z "$BACKUP_PATH" ]; then
              echo "‚ùå No backups found for $DEPLOY_ENV environment"
              exit 1
            fi
          fi
          
          echo "üìÇ Rolling back to: $BACKUP_PATH"
          
          # Stop current application
          echo "‚èπÔ∏è Stopping current application..."
          pm2 stop $APP_NAME || echo "No processes to stop"
          
          # Create backup of current state (in case rollback fails)
          CURRENT_BACKUP="$BACKUP_DIR/btcbot24-$DEPLOY_ENV-pre-rollback-$(date +%Y%m%d-%H%M%S)"
          echo "üíæ Backing up current state to: $CURRENT_BACKUP"
          sudo cp -r $APP_DIR $CURRENT_BACKUP
          
          # Remove current application
          echo "üóëÔ∏è Removing current application..."
          sudo rm -rf $APP_DIR
          
          # Restore from backup
          echo "üì• Restoring from backup..."
          sudo cp -r $BACKUP_PATH $APP_DIR
          sudo chown -R $USER:$USER $APP_DIR
          
          # Navigate to restored directory
          cd $APP_DIR
          
          # Install dependencies (in case they're missing)
          echo "üì¶ Installing dependencies..."
          npm ci --production
          
          # Start application
          echo "‚ñ∂Ô∏è Starting application..."
          if [ -f "ecosystem.$DEPLOY_ENV.config.js" ]; then
            pm2 start ecosystem.$DEPLOY_ENV.config.js
          else
            # Fallback to default ecosystem config
            pm2 start ecosystem.config.js
          fi
          
          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          sleep 15
          
          # Health check
          echo "üè• Performing health check..."
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$DEPLOY_PORT/health || echo "000")
          
          if [ "$HEALTH_CHECK" = "200" ]; then
            echo "‚úÖ Rollback successful! Health check passed."
            pm2 save
            
            # Remove pre-rollback backup (since rollback was successful)
            sudo rm -rf $CURRENT_BACKUP
            echo "üóëÔ∏è Cleaned up pre-rollback backup"
          else
            echo "‚ùå Rollback failed! Health check returned: $HEALTH_CHECK"
            echo "üîÑ Attempting to restore previous state..."
            
            # Stop failed rollback
            pm2 stop $APP_NAME || echo "Failed to stop app"
            
            # Restore previous state
            sudo rm -rf $APP_DIR
            sudo mv $CURRENT_BACKUP $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR
            
            cd $APP_DIR
            pm2 start ecosystem.config.js || pm2 start ecosystem.$DEPLOY_ENV.config.js
            
            echo "üîÑ Previous state restored"
            exit 1
          fi
          
          # Show final status
          echo "üìä Final application status:"
          pm2 status
          
          echo "‚úÖ Rollback completed successfully!"
          echo "üåê Application URL: http://72.61.144.187:$DEPLOY_PORT"
          echo "üîó Admin Panel: http://72.61.144.187:$DEPLOY_PORT/adminpanel"
          
          # Show backup information
          echo ""
          echo "üìã Rollback Summary:"
          echo "  Environment: $DEPLOY_ENV"
          echo "  Rolled back to: $(basename $BACKUP_PATH)"
          echo "  Application: $APP_NAME"
          echo "  Port: $DEPLOY_PORT"

    - name: Rollback notification
      if: always()
      run: |
        ENV="${{ github.event.inputs.environment }}"
        TIMESTAMP="${{ github.event.inputs.backup_timestamp }}"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Rollback to $ENV environment completed successfully!"
          if [ -n "$TIMESTAMP" ]; then
            echo "üìÖ Restored to backup: $TIMESTAMP"
          else
            echo "üìÖ Restored to latest backup"
          fi
        else
          echo "‚ùå Rollback to $ENV environment failed!"
          echo "üìã Please check the logs and consider manual intervention."
        fi