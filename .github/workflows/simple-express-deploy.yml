name: Simple Express Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "🚀 Starting deployment..."
          
          # Create application directory if it doesn't exist
          mkdir -p /var/www/btcbot24
          cd /var/www/btcbot24
          
          # Initialize git repository if it doesn't exist
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://github.com/Pydart-Intelli-Corp/btcbot_node.git
          fi
          
          # Stop PM2 processes
          echo "⏹️ Stopping PM2 processes..."
          pm2 stop btcbot24 || echo "No processes to stop"
          pm2 delete btcbot24 || echo "No processes to delete"
          
          # Backup current deployment
          echo "💾 Creating backup..."
          cp -r /var/www/btcbot24 /var/www/btcbot24-backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || echo "Backup skipped"
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git fetch origin || echo "Fetch completed"
          git reset --hard origin/main || echo "Reset completed"
          git clean -fd || echo "Clean completed"
          
          # Create .env file with all secrets
          echo "⚙️ Creating environment configuration..."
          cat > .env << EOF
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=5000
          
          # Database Configuration
          DB_HOST=localhost
          DB_PORT=3306
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          
          # JWT Configuration
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # Admin Configuration
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          
          # Application Settings
          BASE_URL=http://${{ secrets.VPS_HOST }}
          FRONTEND_URL=http://${{ secrets.VPS_HOST }}
          ALLOWED_ORIGINS=http://${{ secrets.VPS_HOST }},http://localhost:3000,http://localhost:5000
          
          # Email Configuration (optional)
          EMAIL_SERVICE=gmail
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          EMAIL_FROM=noreply@btcbot24.com
          
          # Backup Configuration
          BACKUP_RETENTION_DAYS=${{ secrets.BACKUP_RETENTION_DAYS }}
          EOF
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm install --production
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          node migrate.js || echo "Migration completed"
          
          # Start application with PM2
          echo "▶️ Starting application with PM2..."
          pm2 start server.js --name "btcbot24" --instances 1
          
          # Save PM2 configuration
          pm2 save
          pm2 startup || echo "PM2 startup configured"
          
          # Check PM2 status
          echo "📊 Checking PM2 status..."
          pm2 status
          
          # Check application health
          echo "🏥 Checking application health..."
          sleep 10
          curl -f http://localhost:5000/health || echo "Health check pending..."
          
          # Show application info
          echo "✅ Deployment completed!"
          echo "📍 Application URL: http://${{ secrets.VPS_HOST }}"
          echo "🔧 Admin Panel: http://${{ secrets.VPS_HOST }}/adminpanel"
          echo "📊 Health Check: http://${{ secrets.VPS_HOST }}/health"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "🌐 Application: http://${{ secrets.VPS_HOST }}"
          echo "🔧 Admin Panel: http://${{ secrets.VPS_HOST }}/adminpanel"
        else
          echo "❌ Deployment failed!"
        fi